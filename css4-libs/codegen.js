const process = require('process')
const args = process.argv.slice(2)
const util = require('util')
const dump = util.inspect
const fs = require('fs')
const lexer = require('./ast-lexer-parser')
const { tokens } = require('./token_table')


function CodeGen(input, output, mode='normal') {
    let codegen = lexer.GenerateAST(input)
    for (var i = 0; i < codegen?.length; i++) {
        // BEGIN
        if (codegen[i].type == 'document') {
            fs.writeFileSync(output, '/* Generated by CSS 4*/\n')
        }

        // CLASS
        else if (codegen[i].type == 'class') {
            if (codegen[i].mode ) {
                fs.appendFileSync(output, `.${codegen[i].name}: ${codegen[i].mode} {\n`)
            } else {
                fs.appendFileSync(output, `.${codegen[i].name} {\n`)
            }
        }
        else if (codegen[i].type == 'element') {
            if (codegen[i].mode ) {
                fs.appendFileSync(output, `${codegen[i].name}: ${codegen[i].mode} {\n`)
            } else {
                fs.appendFileSync(output, `${codegen[i].name} {\n`)
            }
        }
        else if (codegen[i].type == 'end') {
            fs.appendFileSync(output, `}\n`)
        }

        // ATTR
        else if (codegen[i].type == 'alignment') {
            fs.appendFileSync(output, `text-align: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'textcolor') {
            fs.appendFileSync(output, `color: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'bgcolor') {
            fs.appendFileSync(output, `background-color: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'font') {
            fs.appendFileSync(output, `font-family: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'fontweight') {
            fs.appendFileSync(output, `font-weight: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'bgimg') {
            fs.appendFileSync(output, `background-image: url(${codegen[i].value});\n`)
        }

        else if (codegen[i].type == 'width') {
            fs.appendFileSync(output, `width: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'height') {
            fs.appendFileSync(output, `height: ${codegen[i].value};\n`)
        }

        else if (codegen[i].type == 'margin_all') {
            fs.appendFileSync(output, `margin: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'margin_top') {
            fs.appendFileSync(output, `margin-top: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'margin_bottom') {
            fs.appendFileSync(output, `margin-bottom: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'margin_left') {
            fs.appendFileSync(output, `margin-left: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'margin_right') {
            fs.appendFileSync(output, `margin-right: ${codegen[i].value};\n`)
        }

        else if (codegen[i].type == 'padding_all') {
            fs.appendFileSync(output, `padding: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'padding_top') {
            fs.appendFileSync(output, `padding-top: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'padding_bottom') {
            fs.appendFileSync(output, `padding-bottom: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'padding_left') {
            fs.appendFileSync(output, `padding-left: ${codegen[i].value};\n`)
        }
        else if (codegen[i].type == 'padding_right') {
            fs.appendFileSync(output, `padding-right: ${codegen[i].value};\n`)
        }
        
        
        
        //console.log("DEBUGGING: "+dump(codegen[i]))
    }
    if (mode == 'debugging') {
        console.log(codegen)
    }
    
    
}

module.exports = { CodeGen }
